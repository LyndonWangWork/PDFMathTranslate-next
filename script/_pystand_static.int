import sys
import pdf2zh_next.main
import os
import babeldoc.assets.assets
import time
from pdf2zh_next.utils.profiler import PerformanceTracer
from pdf2zh_next.utils.profiler import set_process_start_time_ns, emit_startup_timing
import pathlib
import asyncio
import multiprocessing

WAIT_FOR_INPUT = False
if len(sys.argv) == 1:
    sys.argv.append("--gui")  # 无参数时自动添加 -i 参数
    WAIT_FOR_INPUT = True

multiprocessing.set_executable(os.path.join(os.path.dirname(__file__), 'runtime', 'pythonw.exe'))

files = os.listdir(os.path.dirname(__file__))
# record earliest process start to support measuring to first offline assets log
try:
    set_process_start_time_ns(time.perf_counter_ns())
except Exception:
    pass
for file in files:
    if file.endswith(".zip") and file.startswith("offline_assets_"):
        print('find offline_assets_zip file: ', file, ' try restore...')
        _found_ns = time.perf_counter_ns()
        try:
            # measure from startup to first find log
            from pdf2zh_next.utils.profiler import get_process_start_time_ns
            t0 = get_process_start_time_ns()
            if t0 is not None:
                emit_startup_timing(
                    section="startup_offline_assets_find",
                    start_ns=t0,
                    end_ns=_found_ns,
                    stage="启动到发现离线资源包",
                )
        except Exception:
            pass
        try:
            babeldoc.assets.assets.restore_offline_assets_package(pathlib.Path(os.path.dirname(__file__)))
        finally:
            _done_ns = time.perf_counter_ns()
            # record restore duration
            try:
                emit_startup_timing(
                    section="startup_offline_assets_restore",
                    start_ns=_found_ns,
                    end_ns=_done_ns,
                    stage="离线资源包恢复",
                )
            except Exception:
                pass
            # mark env for downstream processes to know offline assets were restored
            try:
                os.environ["PDF2ZH_OFFLINE_ASSETS_RESTORED"] = "1"
            except Exception:
                pass

try:
    code = asyncio.run(pdf2zh_next.main.main())
    print(f"pdf2zh_next.main.main() return code: {code}")
    if WAIT_FOR_INPUT:
        input("Press Enter to continue...")
    sys.exit(code)
except Exception:
    import traceback
    traceback.print_exc()
    if WAIT_FOR_INPUT:
        input("Press Enter to continue...")
    sys.exit(1)